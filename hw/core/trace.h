/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_CORE_GENERATED_TRACERS_H
#define TRACE_HW_CORE_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_LOADER_WRITE_ROM_EVENT;
extern TraceEvent _TRACE_QDEV_RESET_EVENT;
extern TraceEvent _TRACE_QDEV_RESET_ALL_EVENT;
extern TraceEvent _TRACE_QDEV_RESET_TREE_EVENT;
extern TraceEvent _TRACE_QBUS_RESET_EVENT;
extern TraceEvent _TRACE_QBUS_RESET_ALL_EVENT;
extern TraceEvent _TRACE_QBUS_RESET_TREE_EVENT;
extern TraceEvent _TRACE_QDEV_UPDATE_PARENT_BUS_EVENT;
extern TraceEvent _TRACE_RESETTABLE_RESET_EVENT;
extern TraceEvent _TRACE_RESETTABLE_RESET_ASSERT_BEGIN_EVENT;
extern TraceEvent _TRACE_RESETTABLE_RESET_ASSERT_END_EVENT;
extern TraceEvent _TRACE_RESETTABLE_RESET_RELEASE_BEGIN_EVENT;
extern TraceEvent _TRACE_RESETTABLE_RESET_RELEASE_END_EVENT;
extern TraceEvent _TRACE_RESETTABLE_CHANGE_PARENT_EVENT;
extern TraceEvent _TRACE_RESETTABLE_PHASE_ENTER_BEGIN_EVENT;
extern TraceEvent _TRACE_RESETTABLE_PHASE_ENTER_EXEC_EVENT;
extern TraceEvent _TRACE_RESETTABLE_PHASE_ENTER_END_EVENT;
extern TraceEvent _TRACE_RESETTABLE_PHASE_HOLD_BEGIN_EVENT;
extern TraceEvent _TRACE_RESETTABLE_PHASE_HOLD_EXEC_EVENT;
extern TraceEvent _TRACE_RESETTABLE_PHASE_HOLD_END_EVENT;
extern TraceEvent _TRACE_RESETTABLE_PHASE_EXIT_BEGIN_EVENT;
extern TraceEvent _TRACE_RESETTABLE_PHASE_EXIT_EXEC_EVENT;
extern TraceEvent _TRACE_RESETTABLE_PHASE_EXIT_END_EVENT;
extern TraceEvent _TRACE_RESETTABLE_TRANSITIONAL_FUNCTION_EVENT;
extern uint16_t _TRACE_LOADER_WRITE_ROM_DSTATE;
extern uint16_t _TRACE_QDEV_RESET_DSTATE;
extern uint16_t _TRACE_QDEV_RESET_ALL_DSTATE;
extern uint16_t _TRACE_QDEV_RESET_TREE_DSTATE;
extern uint16_t _TRACE_QBUS_RESET_DSTATE;
extern uint16_t _TRACE_QBUS_RESET_ALL_DSTATE;
extern uint16_t _TRACE_QBUS_RESET_TREE_DSTATE;
extern uint16_t _TRACE_QDEV_UPDATE_PARENT_BUS_DSTATE;
extern uint16_t _TRACE_RESETTABLE_RESET_DSTATE;
extern uint16_t _TRACE_RESETTABLE_RESET_ASSERT_BEGIN_DSTATE;
extern uint16_t _TRACE_RESETTABLE_RESET_ASSERT_END_DSTATE;
extern uint16_t _TRACE_RESETTABLE_RESET_RELEASE_BEGIN_DSTATE;
extern uint16_t _TRACE_RESETTABLE_RESET_RELEASE_END_DSTATE;
extern uint16_t _TRACE_RESETTABLE_CHANGE_PARENT_DSTATE;
extern uint16_t _TRACE_RESETTABLE_PHASE_ENTER_BEGIN_DSTATE;
extern uint16_t _TRACE_RESETTABLE_PHASE_ENTER_EXEC_DSTATE;
extern uint16_t _TRACE_RESETTABLE_PHASE_ENTER_END_DSTATE;
extern uint16_t _TRACE_RESETTABLE_PHASE_HOLD_BEGIN_DSTATE;
extern uint16_t _TRACE_RESETTABLE_PHASE_HOLD_EXEC_DSTATE;
extern uint16_t _TRACE_RESETTABLE_PHASE_HOLD_END_DSTATE;
extern uint16_t _TRACE_RESETTABLE_PHASE_EXIT_BEGIN_DSTATE;
extern uint16_t _TRACE_RESETTABLE_PHASE_EXIT_EXEC_DSTATE;
extern uint16_t _TRACE_RESETTABLE_PHASE_EXIT_END_DSTATE;
extern uint16_t _TRACE_RESETTABLE_TRANSITIONAL_FUNCTION_DSTATE;
#define TRACE_LOADER_WRITE_ROM_ENABLED 1
#define TRACE_QDEV_RESET_ENABLED 1
#define TRACE_QDEV_RESET_ALL_ENABLED 1
#define TRACE_QDEV_RESET_TREE_ENABLED 1
#define TRACE_QBUS_RESET_ENABLED 1
#define TRACE_QBUS_RESET_ALL_ENABLED 1
#define TRACE_QBUS_RESET_TREE_ENABLED 1
#define TRACE_QDEV_UPDATE_PARENT_BUS_ENABLED 1
#define TRACE_RESETTABLE_RESET_ENABLED 1
#define TRACE_RESETTABLE_RESET_ASSERT_BEGIN_ENABLED 1
#define TRACE_RESETTABLE_RESET_ASSERT_END_ENABLED 1
#define TRACE_RESETTABLE_RESET_RELEASE_BEGIN_ENABLED 1
#define TRACE_RESETTABLE_RESET_RELEASE_END_ENABLED 1
#define TRACE_RESETTABLE_CHANGE_PARENT_ENABLED 1
#define TRACE_RESETTABLE_PHASE_ENTER_BEGIN_ENABLED 1
#define TRACE_RESETTABLE_PHASE_ENTER_EXEC_ENABLED 1
#define TRACE_RESETTABLE_PHASE_ENTER_END_ENABLED 1
#define TRACE_RESETTABLE_PHASE_HOLD_BEGIN_ENABLED 1
#define TRACE_RESETTABLE_PHASE_HOLD_EXEC_ENABLED 1
#define TRACE_RESETTABLE_PHASE_HOLD_END_ENABLED 1
#define TRACE_RESETTABLE_PHASE_EXIT_BEGIN_ENABLED 1
#define TRACE_RESETTABLE_PHASE_EXIT_EXEC_ENABLED 1
#define TRACE_RESETTABLE_PHASE_EXIT_END_ENABLED 1
#define TRACE_RESETTABLE_TRANSITIONAL_FUNCTION_ENABLED 1

#define TRACE_LOADER_WRITE_ROM_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loader_write_rom(const char * name, uint64_t gpa, uint64_t size, bool isrom)
{
}

static inline void trace_loader_write_rom(const char * name, uint64_t gpa, uint64_t size, bool isrom)
{
    if (true) {
        _nocheck__trace_loader_write_rom(name, gpa, size, isrom);
    }
}

#define TRACE_QDEV_RESET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qdev_reset(void * obj, const char * objtype)
{
}

static inline void trace_qdev_reset(void * obj, const char * objtype)
{
    if (true) {
        _nocheck__trace_qdev_reset(obj, objtype);
    }
}

#define TRACE_QDEV_RESET_ALL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qdev_reset_all(void * obj, const char * objtype)
{
}

static inline void trace_qdev_reset_all(void * obj, const char * objtype)
{
    if (true) {
        _nocheck__trace_qdev_reset_all(obj, objtype);
    }
}

#define TRACE_QDEV_RESET_TREE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qdev_reset_tree(void * obj, const char * objtype)
{
}

static inline void trace_qdev_reset_tree(void * obj, const char * objtype)
{
    if (true) {
        _nocheck__trace_qdev_reset_tree(obj, objtype);
    }
}

#define TRACE_QBUS_RESET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qbus_reset(void * obj, const char * objtype)
{
}

static inline void trace_qbus_reset(void * obj, const char * objtype)
{
    if (true) {
        _nocheck__trace_qbus_reset(obj, objtype);
    }
}

#define TRACE_QBUS_RESET_ALL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qbus_reset_all(void * obj, const char * objtype)
{
}

static inline void trace_qbus_reset_all(void * obj, const char * objtype)
{
    if (true) {
        _nocheck__trace_qbus_reset_all(obj, objtype);
    }
}

#define TRACE_QBUS_RESET_TREE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qbus_reset_tree(void * obj, const char * objtype)
{
}

static inline void trace_qbus_reset_tree(void * obj, const char * objtype)
{
    if (true) {
        _nocheck__trace_qbus_reset_tree(obj, objtype);
    }
}

#define TRACE_QDEV_UPDATE_PARENT_BUS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qdev_update_parent_bus(void * obj, const char * objtype, void * oldp, const char * oldptype, void * newp, const char * newptype)
{
}

static inline void trace_qdev_update_parent_bus(void * obj, const char * objtype, void * oldp, const char * oldptype, void * newp, const char * newptype)
{
    if (true) {
        _nocheck__trace_qdev_update_parent_bus(obj, objtype, oldp, oldptype, newp, newptype);
    }
}

#define TRACE_RESETTABLE_RESET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_reset(void * obj, int cold)
{
}

static inline void trace_resettable_reset(void * obj, int cold)
{
    if (true) {
        _nocheck__trace_resettable_reset(obj, cold);
    }
}

#define TRACE_RESETTABLE_RESET_ASSERT_BEGIN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_reset_assert_begin(void * obj, int cold)
{
}

static inline void trace_resettable_reset_assert_begin(void * obj, int cold)
{
    if (true) {
        _nocheck__trace_resettable_reset_assert_begin(obj, cold);
    }
}

#define TRACE_RESETTABLE_RESET_ASSERT_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_reset_assert_end(void * obj)
{
}

static inline void trace_resettable_reset_assert_end(void * obj)
{
    if (true) {
        _nocheck__trace_resettable_reset_assert_end(obj);
    }
}

#define TRACE_RESETTABLE_RESET_RELEASE_BEGIN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_reset_release_begin(void * obj, int cold)
{
}

static inline void trace_resettable_reset_release_begin(void * obj, int cold)
{
    if (true) {
        _nocheck__trace_resettable_reset_release_begin(obj, cold);
    }
}

#define TRACE_RESETTABLE_RESET_RELEASE_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_reset_release_end(void * obj)
{
}

static inline void trace_resettable_reset_release_end(void * obj)
{
    if (true) {
        _nocheck__trace_resettable_reset_release_end(obj);
    }
}

#define TRACE_RESETTABLE_CHANGE_PARENT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_change_parent(void * obj, void * o, unsigned oc, void * n, unsigned nc)
{
}

static inline void trace_resettable_change_parent(void * obj, void * o, unsigned oc, void * n, unsigned nc)
{
    if (true) {
        _nocheck__trace_resettable_change_parent(obj, o, oc, n, nc);
    }
}

#define TRACE_RESETTABLE_PHASE_ENTER_BEGIN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_phase_enter_begin(void * obj, const char * objtype, unsigned count, int type)
{
}

static inline void trace_resettable_phase_enter_begin(void * obj, const char * objtype, unsigned count, int type)
{
    if (true) {
        _nocheck__trace_resettable_phase_enter_begin(obj, objtype, count, type);
    }
}

#define TRACE_RESETTABLE_PHASE_ENTER_EXEC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_phase_enter_exec(void * obj, const char * objtype, int type, int has_method)
{
}

static inline void trace_resettable_phase_enter_exec(void * obj, const char * objtype, int type, int has_method)
{
    if (true) {
        _nocheck__trace_resettable_phase_enter_exec(obj, objtype, type, has_method);
    }
}

#define TRACE_RESETTABLE_PHASE_ENTER_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_phase_enter_end(void * obj, const char * objtype, unsigned count)
{
}

static inline void trace_resettable_phase_enter_end(void * obj, const char * objtype, unsigned count)
{
    if (true) {
        _nocheck__trace_resettable_phase_enter_end(obj, objtype, count);
    }
}

#define TRACE_RESETTABLE_PHASE_HOLD_BEGIN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_phase_hold_begin(void * obj, const char * objtype, unsigned count, int type)
{
}

static inline void trace_resettable_phase_hold_begin(void * obj, const char * objtype, unsigned count, int type)
{
    if (true) {
        _nocheck__trace_resettable_phase_hold_begin(obj, objtype, count, type);
    }
}

#define TRACE_RESETTABLE_PHASE_HOLD_EXEC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_phase_hold_exec(void * obj, const char * objtype, int has_method)
{
}

static inline void trace_resettable_phase_hold_exec(void * obj, const char * objtype, int has_method)
{
    if (true) {
        _nocheck__trace_resettable_phase_hold_exec(obj, objtype, has_method);
    }
}

#define TRACE_RESETTABLE_PHASE_HOLD_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_phase_hold_end(void * obj, const char * objtype, unsigned count)
{
}

static inline void trace_resettable_phase_hold_end(void * obj, const char * objtype, unsigned count)
{
    if (true) {
        _nocheck__trace_resettable_phase_hold_end(obj, objtype, count);
    }
}

#define TRACE_RESETTABLE_PHASE_EXIT_BEGIN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_phase_exit_begin(void * obj, const char * objtype, unsigned count, int type)
{
}

static inline void trace_resettable_phase_exit_begin(void * obj, const char * objtype, unsigned count, int type)
{
    if (true) {
        _nocheck__trace_resettable_phase_exit_begin(obj, objtype, count, type);
    }
}

#define TRACE_RESETTABLE_PHASE_EXIT_EXEC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_phase_exit_exec(void * obj, const char * objtype, int has_method)
{
}

static inline void trace_resettable_phase_exit_exec(void * obj, const char * objtype, int has_method)
{
    if (true) {
        _nocheck__trace_resettable_phase_exit_exec(obj, objtype, has_method);
    }
}

#define TRACE_RESETTABLE_PHASE_EXIT_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_phase_exit_end(void * obj, const char * objtype, unsigned count)
{
}

static inline void trace_resettable_phase_exit_end(void * obj, const char * objtype, unsigned count)
{
    if (true) {
        _nocheck__trace_resettable_phase_exit_end(obj, objtype, count);
    }
}

#define TRACE_RESETTABLE_TRANSITIONAL_FUNCTION_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_resettable_transitional_function(void * obj, const char * objtype)
{
}

static inline void trace_resettable_transitional_function(void * obj, const char * objtype)
{
    if (true) {
        _nocheck__trace_resettable_transitional_function(obj, objtype);
    }
}
#endif /* TRACE_HW_CORE_GENERATED_TRACERS_H */
